generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_AWS_PROD_URL")
}

model users {
  users_id           Int                  @id @default(autoincrement())
  first_name         String               @db.VarChar(255)
  last_name          String               @db.VarChar(255)
  phone              String               @db.VarChar(255)
  email              String               @db.VarChar(255)
  password           String               @db.VarChar(255)
  created_by         DateTime             @default(now()) @db.Timestamp(6)
  updated_by         DateTime             @default(now()) @db.Timestamp(6)
  comments           comments[]
  firebase_details   firebase_details[]
  invite_friends     invite_friends[]
  past_interview     past_interview[]
  posts              posts[]
  tech_blog          tech_blog[]
  upcoming_interview upcoming_interview[]
}

model tech_blog {
  tech_blog_id Int      @id @default(autoincrement())
  image        String
  title        String   @db.VarChar(255)
  description  String
  tag          String   @db.VarChar(255)
  users_id     Int?
  created_by   DateTime @default(now()) @db.Timestamp(6)
  updated_by   DateTime @default(now()) @db.Timestamp(6)
  users        users?   @relation(fields: [users_id], references: [users_id])
}

model jobs {
  jobs_id     Int      @id @default(autoincrement())
  type        String   @db.VarChar(255)
  company     String   @db.VarChar(255)
  company_url String
  department  String   @db.VarChar(255)
  location    String
  title       String   @db.VarChar(255)
  description String
  url         String
  created_by  DateTime @default(now()) @db.Timestamp(6)
  updated_by  DateTime @default(now()) @db.Timestamp(6)
}

model country {
  country_id Int      @id @default(autoincrement())
  iso        String   @db.Char(2)
  name       String   @db.VarChar(80)
  nicename   String   @db.VarChar(80)
  iso3       String?  @db.Char(3)
  numcode    Int?     @db.SmallInt
  phonecode  Int
  created_by DateTime @default(now()) @db.Timestamp(6)
  updated_by DateTime @default(now()) @db.Timestamp(6)
}

model posts {
  posts_id    Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String
  tag         String     @db.VarChar(255)
  like_count  Int?       @default(0)
  users_id    Int?
  created_by  DateTime   @default(now()) @db.Timestamp(6)
  updated_by  DateTime   @default(now()) @db.Timestamp(6)
  users       users?     @relation(fields: [users_id], references: [users_id])
  comments    comments[]
}

model firebase_details {
  firebase_details_id Int      @id @default(autoincrement())
  current_token       String
  refreshed_token     String
  users_id            Int?
  created_by          DateTime @default(now()) @db.Timestamp(6)
  updated_by          DateTime @default(now()) @db.Timestamp(6)
  users               users?   @relation(fields: [users_id], references: [users_id])
}

model hackathons {
  hackathons_id Int      @id @default(autoincrement())
  image         String
  name          String   @db.VarChar(255)
  mode          String   @db.VarChar(255)
  prize         String
  details       String
  date_time     String
  link          String
  created_by    DateTime @default(now()) @db.Timestamp(6)
  updated_by    DateTime @default(now()) @db.Timestamp(6)
}

model invite_friends {
  invite_friends_id Int      @id @default(autoincrement())
  invite_link       String
  generated_text    String
  users_id          Int?
  created_by        DateTime @default(now()) @db.Timestamp(6)
  updated_by        DateTime @default(now()) @db.Timestamp(6)
  users             users?   @relation(fields: [users_id], references: [users_id])
}

model mock_interview_question {
  mock_interview_question_id Int                  @id @default(autoincrement())
  question_title             String
  question_description       String
  type                       String
  created_by                 DateTime             @default(now()) @db.Timestamp(6)
  updated_by                 DateTime             @default(now()) @db.Timestamp(6)
  past_interview             past_interview[]
  upcoming_interview         upcoming_interview[]
}

model upcoming_interview {
  upcoming_interview_id      Int                      @id @default(autoincrement())
  full_date_time             String
  date_time                  String
  type                       String
  status                     String
  mock_interview_question_id Int?
  users_id                   Int?
  created_by                 DateTime                 @default(now()) @db.Timestamp(6)
  updated_by                 DateTime                 @default(now()) @db.Timestamp(6)
  mock_interview_question    mock_interview_question? @relation(fields: [mock_interview_question_id], references: [mock_interview_question_id])
  users                      users?                   @relation(fields: [users_id], references: [users_id])
}

model past_interview {
  past_interview_id          Int                      @id @default(autoincrement())
  full_date_time             String
  date_time                  String
  type                       String
  status                     String
  mock_interview_question_id Int?
  users_id                   Int?
  created_by                 DateTime                 @default(now()) @db.Timestamp(6)
  updated_by                 DateTime                 @default(now()) @db.Timestamp(6)
  mock_interview_question    mock_interview_question? @relation(fields: [mock_interview_question_id], references: [mock_interview_question_id])
  users                      users?                   @relation(fields: [users_id], references: [users_id])
}

model tech_salary {
  tech_salary_id     Int      @id @default(autoincrement())
  job_title          String   @db.VarChar(255)
  company            String
  description        String
  total_compensation String
  location           String
  created_by         DateTime @default(now()) @db.Timestamp(6)
  updated_by         DateTime @default(now()) @db.Timestamp(6)
}

model women_investor_community {
  women_investor_community_id Int      @id @default(autoincrement())
  image                       String
  name                        String
  investor_type               String
  areas_of_investment         String
  expertise                   String
  location                    String
  status                      String
  created_by                  DateTime @default(now()) @db.Timestamp(6)
  updated_by                  DateTime @default(now()) @db.Timestamp(6)
}

model comments {
  comments_id   Int      @id @default(autoincrement())
  comments_text String
  posts_id      Int?
  users_id      Int?
  created_by    DateTime @default(now()) @db.Timestamp(6)
  updated_by    DateTime @default(now()) @db.Timestamp(6)
  posts         posts?   @relation(fields: [posts_id], references: [posts_id])
  users         users?   @relation(fields: [users_id], references: [users_id])
}
